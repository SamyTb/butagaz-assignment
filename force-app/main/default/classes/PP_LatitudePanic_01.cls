global class PP_LatitudePanic_01 extends PP_BaseLatitudeUpdate_01 implements Process.Plugin {
    protected override String getPluginName(){
        return 'LatitudePanicPlugin';
    }

    protected override String getPluginDescription(){
        return 'This plugin raises an error but does not interrupt the calculation. The level will be made Hors Latitude, and you\'re free to provide an explanation for the error too.';
    }

    public static Integer LatLevel_BTZ = 0;
    
    private Integer getNewLevel(){ return LatLevel_BTZ; }

    private List<String> getNotifiedList(){
        List<String> lEmailAddresses = new List<String>();
        for (LatitudeNotified__c oLatitudeNotified : LatitudeNotified__c.getAll().values()){
            lEmailAddresses.add(oLatitudeNotified.UserEmail__c);
        }
        return lEmailAddresses;
    }

    private void reportPanic(String panicReason, String location, String quoteId, String unexpectedParameter){
        Messaging.reserveSingleEmailCapacity(this.getNotifiedList().size());
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setToAddresses(this.getNotifiedList());
        mail.setSenderDisplayName('Latitude Flow');
        mail.setSubject('[LATITUDE] An error occured!');
        mail.useSignature = false;

        String messageBody = '';
        messageBody += 'An error occured in the Latitude flow runner.\n';
        messageBody += 'The error occured in the Flow: [ ' + location + '].\n';
        if (quoteId != ''){ messageBody += 'The error occured on Quote with ID: [' + QuoteId + '].\n'; }
        messageBody += 'The Quote was marked "Hors Latitudes".\n';
        messageBody += 'The error mesage that was generated by the Latitude flow follows:\n\n';
        messageBody += '---- BEGIN PANIC MESSAGE ----\n';
        messageBody += panicReason;
        messageBody += '\n';
        if (unexpectedParameter != ''){ 
            messageBody += '---- BEGIN UNEXPECTED PARAMETER ----\n';
            messageBody += 'Additionnaly, the flow submitted an unexpected parameter: [' + unexpectedParameter + '].\n'; 
        }
        messageBody += '---- END PANIC MESSAGE ----';

        mail.plainTextBody = messageBody;

        Messaging.sendEmail(new List<Messaging.SingleEmailMessage>{mail});
    }

    protected override Map<String, Object> getResultMap(Process.PluginRequest request){
        String  panicReason  = String.valueOf(request.inputParameters.get('PanicReason'));
        String  location     = String.valueOf(request.inputParameters.get('Location'));

        String  quoteId;
        if (request.inputParameters.get('QuoteId') == null){ quoteId = ''; } 
        else { quoteId = String.valueOf(request.inputParameters.get('QuoteId')); }

        String  unexpectedParameter;
        if (request.inputParameters.get('UnexpectedParameter') == null){ unexpectedParameter = ''; } 
        else { unexpectedParameter = String.valueOf(request.inputParameters.get('UnexpectedParameter')); }

        this.reportPanic(panicReason, location, quoteId, unexpectedParameter);

        Map<String, Object> resultMap = new Map<String, Object>();
        resultMap.put('NewLevel', this.getNewLevel());
        return resultMap;
    }

    protected override List<Process.PluginDescribeResult.InputParameter> getInputParameters(){
        return new List<Process.PluginDescribeResult.InputParameter>{
            new Process.PluginDescribeResult.InputParameter('PanicReason', 'Why are your raising a panic?', Process.PluginDescribeResult.ParameterType.STRING, true),
            new Process.PluginDescribeResult.InputParameter('Location', 'What is the name of the Flow where the error occured?', Process.PluginDescribeResult.ParameterType.STRING, true),
            new Process.PluginDescribeResult.InputParameter('QuoteId', 'The ID of the quote that an error was raised from.', Process.PluginDescribeResult.ParameterType.STRING, false),
            new Process.PluginDescribeResult.InputParameter('UnexpectedParameter', 'If the error was caused by an expected parameter, add it here', Process.PluginDescribeResult.ParameterType.STRING, false)
        };
    }

    protected override List<Process.PluginDescribeResult.OutputParameter> getOutputParameters(){
        return new List<Process.PluginDescribeResult.OutputParameter>{
            new Process.PluginDescribeResult.OutputParameter('NewLevel', 'New (Integer) Latitude Level.', Process.PluginDescribeResult.ParameterType.INTEGER)
        }; 
    }
}